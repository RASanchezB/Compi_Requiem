import java.io.*;
import java_cup.runtime.*;
import java.util.*;

parser code
{:

    public void syntax_error(Symbol s){ 

       System.out.println("Sintaxis correcta");
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 

        System.out.println("Sintaxis correcta"); 
    } 
:}
//lexemas
terminal String BOOL, NUM, LETTER,NADA;
terminal String ID;

//palabras reservadas y Operadores

terminal PUNTOC, PARENTESISA, PARENTESISC, ABRIRC, CERRARC , ASSIGNMENT, BRACKETA, BRACKETC, COMMA;
terminal OPER, OPEA_SUM, OPEA_MULT, OPEA_MOD, BOOL, ARRAY, FOR, WLE, IF, EIF, ELSE ,BLOCK, END;
terminal CATCH, THROW, THROWDOWN ,NUM, LETTER, WORD , FUNC, START ,FLECHA, ID, VAR ,NEW, FUNC, NOT;
terminal IN, PUNTO;

//not terminales
non terminal Program;
non terminal ifState;
non terminal expression;
non terminal valores;
non terminal   type;
non terminal parametro;
non terminal declara;
non terminal declara_puntoc;
non terminal declara_array;
non terminal declara_simple;
non terminal ifEmparejado;
non terminal ifNEmparejado;
non terminal eif;
non terminal proposition;
non terminal asigna;
non terminal CicloFor;


start with Program;

Program ::= START FLECHA BRACKETA body BRACKETC;

declara ::= VAR type    list_id  PUNTOC;

declara_simple::= VAR type  ID  declara_puntoc;

funciones::= FUNC type ID PARENTESISA parametro PARENTESISC BRACKETA body BRACKETC;

CicloFor::= FOR PARENTESISA ID IN PUNTO PUNTO ID PARENTESISC FLECHA ABRIRC proposition CERRARC;


proposition::= WLE expression FLECHA ABRIRC proposition CERRARC
    |   CicloFor
    |   ifState
    |   ID ASSIGNMENT expression;

list_id::=ID
    |   list_id COMMA ID;

type::= NUM
    |   BOOL
    |   LETTER
    |   WORD;

declara_puntoc::=PUNTOC
    |   asigna;

asigna::= ASSIGNMENT valores PUNTOC;
    |   ASSIGNMENT NADA PUNTOC;


declara_array::= VAR ID ASSIGNMENT NEW ARRAY PARENTESISA ID PARENTESISC BRACKETA type BRACKETC

valores::= BOOL 
    |   NUM
    |   LETTER;

ifState::= ifEmparejado | ifNEmparejado;

ifEmparejado::=IF expression ABRIRC proposition CERRARC eif;

ifNEmparejado::=IF expression ABRIRC proposition CERRARC;

eif::=EIF expression ABRIRC proposition CERRARC  eif
    |   ELSE ABRIRC proposition CERRARC;

expression::= expression_simple
    |   expression_simple OPER expression_simple;

expression_simple::= termino
    |   signo termino
    |   expression_simple OPEA_SUM termino;

termino::= factor
    |   termino OPEA_MULT factor;
//tener cuidado con el not
factor::= ID
    |   ID PARENTESISA list_expression PARENTESISC
    |   NUM
    |   PARENTESISA expression PARENTESISC
    |   NOT factor;

factor_for ::= ID
	| NUM
	| signo NUM;

signo ::= OPSUM;

list_expression::= expression | list_expression COMMA expression;