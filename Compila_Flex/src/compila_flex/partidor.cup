package compila_flex;

import java.io.*;
import java_cup.runtime.*;
import java.util.*;

parser code
{:
    public static Nodo arbol;
         /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
       System.out.println("Error Sintáctico en la Columna " + (s.left) +
        " linear "+s.right+ ". No se esperaba este componente: " +s.value+".");
       System.out.println("Sintaxis malo malo malo");
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la columna " + 
        (s.left)+ " linear "+s.right+". Componente " + s.value + 
        " no reconocido.");
        System.out.println("Sintaxis MAL irrecuperable"); 
    }  
    
:}

action code 
{:
    Nodo arbol;
    int token=0;
    int parNum=0;
:}


//lexemas
terminal  VERDAD, NUMERITO, LETRA,WORD;


//palabras reservadas y Operadores

terminal PUNTOC, PARENTESISA, PARENTESISC, ABRIRC, CERRARC , ASSIGNMENT, BRACKETA, BRACKETC, COMMA;
terminal OPER, OPEA_SUM, OPEA_MULT, BOOL,  FOR, WLE, IF, EIF, ELSE ,BLOCK, END;
terminal NUM, LETTER, FUNC, START ,FLECHA,  VAR ,  NOT;
terminal IN, PUNTO, CASE,DEFAULT, REPLY, ID;
terminal ARRAY,NEW;
terminal THROW,THROWDOWN,CATCH;

//not terminales
non terminal Program;
non terminal ifState;
non terminal expression;
non terminal valores;
non terminal type;
non terminal body;
non terminal parametro;
//non terminal declara;
non terminal declara_puntoc;
non terminal declara_array;
non terminal declara_simple;
non terminal eif;
non terminal proposition;
non terminal asigna;
non terminal CicloFor;
non terminal funciones;
non terminal expression_simple;
non terminal termino;
non terminal signo;
non terminal factor;
//non terminal factor_for;
non terminal list_expression;
non terminal block_switch;
non terminal cases;
non terminal vacio;
non terminal print;
non terminal catch;

start with Program;

//program
Program ::= START FLECHA BRACKETA body:b BRACKETC
{:
    token ++;
    Nodo start = new Nodo("Start",null,token);
    token ++;
    Nodo flecha = new Nodo("flecha",null,token);
    token ++;
    Nodo Braca = new Nodo("Bracket izquierdo",null,token);
    token ++;
    Nodo Bracc = new Nodo("Bracket derecho",null,token);
    start.addHijo(flecha);
    start.addHijo(Braca);
    start.addHijo(Bracc);
    //start.addHijo((Nodo)b);
    //start.print();
    //start.escribirArchivo("]");
    parser.arbol = start;
    //RESULT = node;
:};

//declara ::= VAR type ID ASSIGNMENT  valores  PUNTOC;

declara_simple::= VAR type:t ID:id declara_puntoc:d
{:
    //no estoy seguro de como declarar id
    token++;
    Nodo decla = new Nodo("Declaracion",null,token);
    decla.addHijo((Nodo)t);
    decla.addHijo((Nodo)d);
    
    token++;
    Nodo node = new Nodo("Id",null,token);
    decla.addHijo(node);
    RESULT = node;

    
:};

funciones::= FUNC type ID PARENTESISA parametro PARENTESISC BRACKETA body REPLY PARENTESISA parametro PARENTESISC BRACKETC;

CicloFor::= FOR PARENTESISA ID IN NUM PUNTO PUNTO PUNTO NUM PARENTESISC FLECHA ABRIRC body CERRARC;
//body
body::= proposition:p body:b
{:
    token++;
    Nodo node = new Nodo("Body",null,0);
    node.addHijo((Nodo)p);
    node.addHijo((Nodo)b);
    RESULT = node;
:}
    |   funciones:f body:b
{:
    token++;
    Nodo node = new Nodo("Body",null,0);
    node.addHijo((Nodo)b);
    node.addHijo((Nodo)f);
    RESULT = node;
:}
    |   error body:b
{:
    token++;
    Nodo node = new Nodo("Body",null,0);
    node.addHijo("Error",token);
    node.addHijo((Nodo)b);
    RESULT = node;
:}
    | {::};
//parametro
parametro::= type ID
    | ID;
//proposciones
proposition::= WLE expression FLECHA ABRIRC proposition CERRARC
    |   declara_simple:d
{:
    token++;
    Nodo node = new Nodo("Proposicion",null,token);
    node.addHijo("Error",token);
    node.addHijo((Nodo)d);
    RESULT = node;
:}
    |   CicloFor
    |   ifState
    |   ID ASSIGNMENT expression PUNTOC
    |   block_switch
    |   print
    |   catch;
//impresiones
print::= THROW PARENTESISA ID PARENTESISC PUNTOC
    |   THROW PARENTESISA valores PARENTESISC PUNTOC
    |   THROWDOWN PARENTESISA ID PARENTESISC PUNTOC
    |   THROWDOWN PARENTESISA valores PARENTESISC PUNTOC;

//scanner     
catch::= CATCH PARENTESISA ID COMMA ID PARENTESISC PUNTOC;

//tipo
type::= VERDAD
{:
    token++;
    Nodo node = new Nodo("Verdad", null, token);
    RESULT = node;
    
:}
    | NUMERITO
{:
    token++;
    Nodo node = new Nodo("Numero", null, token);
    RESULT = node;
:}
    | LETRA
{:
    token++;
    Nodo node = new Nodo("Char", null, token);
    RESULT = node;
:}
    | WORD
{:
    token++;
    Nodo node = new Nodo("String", null, token);
    RESULT = node;
:};

//declara puntoC
declara_puntoc::= PUNTOC
{:
    token++;
    Nodo node = new Nodo(";", null, token);
    RESULT = node;
:}
    |   asigna;

//asignacion
asigna::= ASSIGNMENT valores PUNTOC
    |   ASSIGNMENT ID PUNTOC
    |   vacio PUNTOC;

//array
declara_array::= VAR ID ASSIGNMENT NEW ARRAY PARENTESISA NUM PARENTESISC BRACKETA type BRACKETC;

//valores
valores::= NUM
    |   BOOL
    |   LETTER;

//if

ifState::= IF PARENTESISA expression PARENTESISC ABRIRC proposition CERRARC eif;

eif::= EIF expression ABRIRC proposition CERRARC eif
    |   ELSE ABRIRC proposition CERRARC
    |   {::};

//bloque switch
block_switch::= BLOCK PARENTESISA ID PARENTESISC FLECHA cases END;

cases::= CASE ID ABRIRC body CERRARC cases
    |   CASE valores ABRIRC body CERRARC cases
    |   DEFAULT ABRIRC body CERRARC ;
//expresiones
expression::= expression_simple
    |   expression_simple OPER expression;

expression_simple::= termino
    |   signo termino
    |   expression_simple OPEA_SUM termino;

termino::= factor
    |   termino OPEA_MULT factor;
//tener cuidado con el not
factor::= ID
    |   ID PARENTESISA list_expression PARENTESISC
    |   valores
    |   PARENTESISA expression PARENTESISC
    |   NOT factor;

/*factor_for ::= ID
	| NUM
	| signo NUM;
*/
signo ::= OPEA_SUM;

list_expression::= expression | list_expression COMMA expression;