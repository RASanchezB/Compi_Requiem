package compila_flex;

import java.io.*;
import java_cup.runtime.*;
import java.util.*;

parser code
{:
         /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
       System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
       System.out.println("Sintaxis malo malo malo");
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido.");
        System.out.println("Sintaxis MAL irrecuperable"); 
    }  
:}
//lexemas
terminal String bool, num, letter,NADA;
terminal String ID;

//palabras reservadas y Operadores

terminal PUNTOC, PARENTESISA, PARENTESISC, ABRIRC, CERRARC , ASSIGNMENT, BRACKETA, BRACKETC, COMMA;
terminal OPER, OPEA_SUM, OPEA_MULT, BOOL,  FOR, WLE, IF, EIF, ELSE ,BLOCK, END;
terminal NUM, LETTER, WORD , FUNC, START ,FLECHA,  VAR ,  NOT;
terminal IN, PUNTO, CASE,DEFAULT, REPLY;
terminal ARRAY,NEW;
terminal THROW,THROWDOWN,CATCH,VALORCHAR;

//not terminales
non terminal Program;
non terminal ifState;
non terminal expression;
non terminal valores;
non terminal   type;
non terminal body;
non terminal parametro;
non terminal list_id;
non terminal declara;
non terminal declara_puntoc;
non terminal declara_array;
non terminal declara_simple;
non terminal ifEmparejado;
non terminal ifNEmparejado;
non terminal eif;
non terminal proposition;
non terminal asigna;
non terminal CicloFor;
non terminal funciones;
non terminal expression_simple;
non terminal termino;
non terminal signo;
non terminal factor;
//non terminal factor_for;
non terminal list_expression;
non terminal block_switch;
non terminal cases;
non terminal vacio;

start with Program;

Program ::= START FLECHA BRACKETA body BRACKETC;

declara ::= VAR type  list_id  PUNTOC;

declara_simple::= VAR type  ID  declara_puntoc;

funciones::= FUNC type ID PARENTESISA parametro PARENTESISC BRACKETA body REPLY PARENTESISA ID PARENTESISC BRACKETC;

CicloFor::= FOR PARENTESISA ID IN PUNTO PUNTO ID PARENTESISC FLECHA ABRIRC proposition CERRARC;

body::= proposition
    |   funciones;


proposition::= WLE expression FLECHA ABRIRC proposition CERRARC
    |   CicloFor
    |   ifState
    |   ID ASSIGNMENT expression
    |   block_switch
    |   declara
    |   declara_simple;

list_id::= ID list_id
    |   COMMA list_id;

type::= NUM
    |   BOOL
    |   LETTER
    |   WORD;

declara_puntoc::= PUNTOC
    |   asigna;

asigna::= ASSIGNMENT valores PUNTOC
    |   ASSIGNMENT NADA PUNTOC;


declara_array::= VAR ID ASSIGNMENT NEW ARRAY PARENTESISA ID PARENTESISC BRACKETA type BRACKETC
    |   valores COMMA;

//añadir mas tarde el string
valores::= bool 
    |   num
    |   letter;

//if
ifState::= ifEmparejado | ifNEmparejado;

ifEmparejado::=IF expression ABRIRC proposition CERRARC eif;

ifNEmparejado::=IF expression ABRIRC proposition CERRARC;

eif::= EIF expression ABRIRC proposition CERRARC eif
    |   ELSE ABRIRC proposition CERRARC
    |   vacio;

//bloque switch
block_switch::= BLOCK PARENTESISA ID PARENTESISC FLECHA cases END;

cases::= CASE ID ABRIRC proposition CERRARC cases
    |   CASE num ABRIRC proposition CERRARC cases
    |   CASE letter ABRIRC proposition CERRARC cases
    |   DEFAULT ABRIRC proposition CERRARC ;
//expresiones
expression::= expression_simple
    |   expression_simple OPER expression_simple;

expression_simple::= termino
    |   signo termino
    |   expression_simple OPEA_SUM termino;

termino::= factor
    |   termino OPEA_MULT factor;
//tener cuidado con el not
factor::= ID
    |   ID PARENTESISA list_expression PARENTESISC
    |   NUM
    |   PARENTESISA expression PARENTESISC
    |   NOT factor;

/*factor_for ::= ID
	| NUM
	| signo NUM;
*/
signo ::= OPEA_SUM;

list_expression::= expression | list_expression COMMA expression;