package compila_flex;


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSIntactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSIntactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSIntactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSIntactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\007\000\002\012" +
    "\006\000\002\015\006\000\002\024\017\000\002\023\016" +
    "\000\002\007\003\000\002\007\003\000\002\021\010\000" +
    "\002\021\003\000\002\021\003\000\002\021\005\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\011" +
    "\004\000\002\011\004\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\013\003\000" +
    "\002\013\003\000\002\022\005\000\002\022\005\000\002" +
    "\014\015\000\002\014\004\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\003\003\000\002\003\003" +
    "\000\002\016\010\000\002\017\007\000\002\020\010\000" +
    "\002\020\006\000\002\020\003\000\002\032\011\000\002" +
    "\033\010\000\002\033\010\000\002\033\010\000\002\033" +
    "\006\000\002\004\003\000\002\004\005\000\002\025\003" +
    "\000\002\025\004\000\002\025\005\000\002\026\003\000" +
    "\002\026\005\000\002\030\003\000\002\030\006\000\002" +
    "\030\003\000\002\030\005\000\002\030\004\000\002\027" +
    "\003\000\002\031\003\000\002\031\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\004\041\005\001\002\000\004\002\222\001" +
    "\002\000\004\042\006\001\002\000\004\017\007\001\002" +
    "\000\020\010\024\026\013\027\016\030\022\033\010\040" +
    "\012\043\020\001\002\000\004\012\170\001\002\000\010" +
    "\015\ufff7\020\ufff7\051\ufff7\001\002\000\012\025\111\035" +
    "\105\036\110\037\106\001\002\000\004\012\141\001\002" +
    "\000\010\015\uffe3\020\uffe3\051\uffe3\001\002\000\010\015" +
    "\ufff3\020\ufff3\051\ufff3\001\002\000\014\010\037\012\035" +
    "\023\033\035\032\044\041\001\002\000\010\015\uffe2\020" +
    "\uffe2\051\uffe2\001\002\000\012\025\111\035\105\036\110" +
    "\037\106\001\002\000\004\020\104\001\002\000\014\010" +
    "\037\012\035\023\033\035\032\044\041\001\002\000\010" +
    "\015\ufff4\020\ufff4\051\ufff4\001\002\000\004\016\031\001" +
    "\002\000\010\015\ufff8\020\ufff8\051\ufff8\001\002\000\006" +
    "\020\ufffa\051\ufffa\001\002\000\006\020\ufffb\051\ufffb\001" +
    "\002\000\010\015\ufff5\020\ufff5\051\ufff5\001\002\000\014" +
    "\010\037\012\035\023\033\035\032\044\041\001\002\000" +
    "\026\013\uffce\014\uffce\015\uffce\020\uffce\021\uffce\022\uffce" +
    "\023\uffce\024\uffce\042\uffce\051\uffce\001\002\000\012\010" +
    "\uffcb\012\uffcb\035\uffcb\044\uffcb\001\002\000\026\013\uffd5" +
    "\014\uffd5\015\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024" +
    "\047\042\uffd5\051\uffd5\001\002\000\014\010\037\012\035" +
    "\023\033\035\032\044\041\001\002\000\010\015\ufff6\020" +
    "\ufff6\051\ufff6\001\002\000\030\012\054\013\uffd0\014\uffd0" +
    "\015\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\042" +
    "\uffd0\051\uffd0\001\002\000\026\013\uffd2\014\uffd2\015\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\042\uffd2\051" +
    "\uffd2\001\002\000\012\010\037\012\035\035\032\044\041" +
    "\001\002\000\012\010\037\012\035\035\032\044\041\001" +
    "\002\000\024\013\uffd7\014\uffd7\015\uffd7\020\uffd7\021\uffd7" +
    "\022\044\023\045\042\uffd7\051\uffd7\001\002\000\014\010" +
    "\037\012\035\023\033\035\032\044\041\001\002\000\012" +
    "\010\037\012\035\035\032\044\041\001\002\000\026\013" +
    "\uffd3\014\uffd3\015\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3" +
    "\024\047\042\uffd3\051\uffd3\001\002\000\012\010\037\012" +
    "\035\035\032\044\041\001\002\000\026\013\uffd1\014\uffd1" +
    "\015\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\042" +
    "\uffd1\051\uffd1\001\002\000\022\013\uffd6\014\uffd6\015\uffd6" +
    "\020\uffd6\021\uffd6\023\045\042\uffd6\051\uffd6\001\002\000" +
    "\026\013\uffd4\014\uffd4\015\uffd4\020\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\024\047\042\uffd4\051\uffd4\001\002\000\026\013" +
    "\uffcc\014\uffcc\015\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc" +
    "\024\uffcc\042\uffcc\051\uffcc\001\002\000\014\010\037\012" +
    "\035\023\033\035\032\044\041\001\002\000\006\013\uffca" +
    "\021\uffca\001\002\000\006\013\060\021\057\001\002\000" +
    "\014\010\037\012\035\023\033\035\032\044\041\001\002" +
    "\000\026\013\uffcf\014\uffcf\015\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\042\uffcf\051\uffcf\001\002\000\006" +
    "\013\uffc9\021\uffc9\001\002\000\004\013\063\001\002\000" +
    "\026\013\uffcd\014\uffcd\015\uffcd\020\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\042\uffcd\051\uffcd\001\002\000\004\014" +
    "\065\001\002\000\016\010\024\026\013\027\016\030\022" +
    "\033\010\043\020\001\002\000\004\015\067\001\002\000" +
    "\014\015\uffe0\020\uffe0\031\072\032\071\051\uffe0\001\002" +
    "\000\010\015\uffe1\020\uffe1\051\uffe1\001\002\000\004\014" +
    "\101\001\002\000\014\010\037\012\035\023\033\035\032" +
    "\044\041\001\002\000\010\015\uffdd\020\uffdd\051\uffdd\001" +
    "\002\000\004\014\075\001\002\000\016\010\024\026\013" +
    "\027\016\030\022\033\010\043\020\001\002\000\004\015" +
    "\077\001\002\000\006\031\072\032\071\001\002\000\010" +
    "\015\uffdf\020\uffdf\051\uffdf\001\002\000\016\010\024\026" +
    "\013\027\016\030\022\033\010\043\020\001\002\000\004" +
    "\015\103\001\002\000\010\015\uffde\020\uffde\051\uffde\001" +
    "\002\000\004\002\000\001\002\000\006\010\ufff0\021\ufff0" +
    "\001\002\000\006\010\uffed\021\uffed\001\002\000\006\010" +
    "\112\021\113\001\002\000\006\010\uffee\021\uffee\001\002" +
    "\000\006\010\uffef\021\uffef\001\002\000\012\010\116\011" +
    "\124\016\123\021\113\001\002\000\006\010\116\021\113" +
    "\001\002\000\004\011\115\001\002\000\010\015\uffff\020" +
    "\uffff\051\uffff\001\002\000\006\010\116\021\113\001\002" +
    "\000\004\011\ufff1\001\002\000\004\011\ufff2\001\002\000" +
    "\010\015\uffeb\020\uffeb\051\uffeb\001\002\000\010\015\ufffe" +
    "\020\ufffe\051\ufffe\001\002\000\012\004\125\005\126\006" +
    "\130\007\127\001\002\000\010\015\uffec\020\uffec\051\uffec" +
    "\001\002\000\004\011\uffe6\001\002\000\004\011\uffe5\001" +
    "\002\000\004\011\133\001\002\000\004\011\uffe4\001\002" +
    "\000\004\011\132\001\002\000\010\015\uffea\020\uffea\051" +
    "\uffea\001\002\000\010\015\uffe9\020\uffe9\051\uffe9\001\002" +
    "\000\004\042\135\001\002\000\004\014\136\001\002\000" +
    "\016\010\024\026\013\027\016\030\022\033\010\043\020" +
    "\001\002\000\004\015\140\001\002\000\010\015\ufff9\020" +
    "\ufff9\051\ufff9\001\002\000\004\010\142\001\002\000\004" +
    "\045\143\001\002\000\004\046\144\001\002\000\004\046" +
    "\145\001\002\000\004\010\146\001\002\000\004\013\147" +
    "\001\002\000\004\042\150\001\002\000\004\014\151\001" +
    "\002\000\016\010\024\026\013\027\016\030\022\033\010" +
    "\043\020\001\002\000\004\015\153\001\002\000\010\015" +
    "\ufffc\020\ufffc\051\ufffc\001\002\000\004\010\155\001\002" +
    "\000\004\012\156\001\002\000\002\001\002\000\004\013" +
    "\160\001\002\000\004\017\161\001\002\000\020\010\024" +
    "\026\013\027\016\030\022\033\010\040\012\043\020\001" +
    "\002\000\004\051\163\001\002\000\004\012\164\001\002" +
    "\000\004\010\165\001\002\000\004\013\166\001\002\000" +
    "\004\020\167\001\002\000\006\020\ufffd\051\ufffd\001\002" +
    "\000\004\010\171\001\002\000\004\013\172\001\002\000" +
    "\004\042\173\001\002\000\006\047\176\050\174\001\002" +
    "\000\004\014\217\001\002\000\004\034\216\001\002\000" +
    "\010\005\200\006\201\010\177\001\002\000\004\014\212" +
    "\001\002\000\004\014\206\001\002\000\004\014\202\001" +
    "\002\000\016\010\024\026\013\027\016\030\022\033\010" +
    "\043\020\001\002\000\004\015\204\001\002\000\006\047" +
    "\176\050\174\001\002\000\004\034\uffd9\001\002\000\016" +
    "\010\024\026\013\027\016\030\022\033\010\043\020\001" +
    "\002\000\004\015\210\001\002\000\006\047\176\050\174" +
    "\001\002\000\004\034\uffda\001\002\000\016\010\024\026" +
    "\013\027\016\030\022\033\010\043\020\001\002\000\004" +
    "\015\214\001\002\000\006\047\176\050\174\001\002\000" +
    "\004\034\uffdb\001\002\000\010\015\uffdc\020\uffdc\051\uffdc" +
    "\001\002\000\016\010\024\026\013\027\016\030\022\033" +
    "\010\043\020\001\002\000\004\015\221\001\002\000\004" +
    "\034\uffd8\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\010\007\020" +
    "\012\022\015\014\016\013\017\016\021\026\023\024\024" +
    "\025\032\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\133\025\042\026\033" +
    "\027\041\030\037\001\001\000\002\001\001\000\004\006" +
    "\106\001\001\000\002\001\001\000\014\004\063\025\042" +
    "\026\033\027\041\030\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\035\025\042\026" +
    "\033\027\041\030\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\061\025\042\026" +
    "\033\027\041\030\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\052\001\001\000" +
    "\006\026\051\030\037\001\001\000\002\001\001\000\012" +
    "\025\050\026\033\027\041\030\037\001\001\000\006\026" +
    "\045\030\037\001\001\000\002\001\001\000\004\030\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\004\054\025\042\026\033" +
    "\027\041\030\037\031\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\060\025\042\026\033\027\041" +
    "\030\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\010\012\022\015\014\016\013\017\016\021\065\023" +
    "\024\032\027\001\001\000\002\001\001\000\006\020\067" +
    "\034\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\073\025\042\026\033\027\041\030\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\010\012" +
    "\022\015\014\016\013\017\016\021\075\023\024\032\027" +
    "\001\001\000\002\001\001\000\006\020\077\034\072\001" +
    "\001\000\002\001\001\000\022\003\010\012\022\015\014" +
    "\016\013\017\016\021\101\023\024\032\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\117\013\121" +
    "\022\120\001\001\000\004\011\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\010\012" +
    "\022\015\014\016\013\017\016\021\136\023\024\032\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\010\012\022\015\014\016\013" +
    "\017\016\021\151\023\024\032\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\010\007\161\012\022\015\014\016\013" +
    "\017\016\021\026\023\024\024\025\032\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\010\012\022\015\014\016\013\017\016\021" +
    "\202\023\024\032\027\001\001\000\002\001\001\000\004" +
    "\033\204\001\001\000\002\001\001\000\022\003\010\012" +
    "\022\015\014\016\013\017\016\021\206\023\024\032\027" +
    "\001\001\000\002\001\001\000\004\033\210\001\001\000" +
    "\002\001\001\000\022\003\010\012\022\015\014\016\013" +
    "\017\016\021\212\023\024\032\027\001\001\000\002\001" +
    "\001\000\004\033\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\010\012\022\015\014\016\013\017" +
    "\016\021\217\023\024\032\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSIntactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSIntactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSIntactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void syntax_error(Symbol s){ 

       System.out.println("Sintaxis correcta");
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 

        System.out.println("Sintaxis correcta"); 
    } 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSIntactico$actions {
  private final AnalizadorSIntactico parser;

  /** Constructor */
  CUP$AnalizadorSIntactico$actions(AnalizadorSIntactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSIntactico$do_action_part00000000(
    int                        CUP$AnalizadorSIntactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSIntactico$parser,
    java.util.Stack            CUP$AnalizadorSIntactico$stack,
    int                        CUP$AnalizadorSIntactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSIntactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSIntactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSIntactico$parser.done_parsing();
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= START FLECHA BRACKETA body BRACKETC 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declara ::= VAR type list_id PUNTOC 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("declara",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declara_simple ::= VAR type ID declara_puntoc 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("declara_simple",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funciones ::= FUNC type ID PARENTESISA parametro PARENTESISC BRACKETA body REPLY PARENTESISA ID PARENTESISC BRACKETC 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("funciones",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CicloFor ::= FOR PARENTESISA ID IN PUNTO PUNTO ID PARENTESISC FLECHA ABRIRC proposition CERRARC 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("CicloFor",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // body ::= proposition 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("body",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // body ::= funciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("body",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // proposition ::= WLE expression FLECHA ABRIRC proposition CERRARC 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("proposition",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // proposition ::= CicloFor 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("proposition",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // proposition ::= ifState 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("proposition",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // proposition ::= ID ASSIGNMENT expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("proposition",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // proposition ::= block_switch 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("proposition",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // proposition ::= declara 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("proposition",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // proposition ::= declara_simple 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("proposition",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // list_id ::= ID list_id 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("list_id",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // list_id ::= COMMA list_id 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("list_id",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= NUM 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= LETTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= WORD 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declara_puntoc ::= PUNTOC 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("declara_puntoc",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declara_puntoc ::= asigna 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("declara_puntoc",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // asigna ::= ASSIGNMENT valores PUNTOC 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("asigna",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // asigna ::= ASSIGNMENT NADA PUNTOC 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("asigna",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declara_array ::= VAR ID ASSIGNMENT NEW ARRAY PARENTESISA ID PARENTESISC BRACKETA type BRACKETC 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("declara_array",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declara_array ::= valores COMMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("declara_array",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // valores ::= bool 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("valores",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // valores ::= num 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("valores",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // valores ::= letter 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("valores",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ifState ::= ifEmparejado 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("ifState",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ifState ::= ifNEmparejado 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("ifState",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ifEmparejado ::= IF expression ABRIRC proposition CERRARC eif 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("ifEmparejado",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ifNEmparejado ::= IF expression ABRIRC proposition CERRARC 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("ifNEmparejado",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // eif ::= EIF expression ABRIRC proposition CERRARC eif 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("eif",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // eif ::= ELSE ABRIRC proposition CERRARC 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("eif",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // eif ::= vacio 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("eif",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // block_switch ::= BLOCK PARENTESISA ID PARENTESISC FLECHA cases END 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("block_switch",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cases ::= CASE ID ABRIRC proposition CERRARC cases 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("cases",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cases ::= CASE num ABRIRC proposition CERRARC cases 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("cases",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cases ::= CASE letter ABRIRC proposition CERRARC cases 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("cases",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cases ::= DEFAULT ABRIRC proposition CERRARC 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("cases",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= expression_simple 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= expression_simple OPER expression_simple 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression_simple ::= termino 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("expression_simple",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression_simple ::= signo termino 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("expression_simple",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression_simple ::= expression_simple OPEA_SUM termino 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("expression_simple",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // termino ::= factor 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // termino ::= termino OPEA_MULT factor 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= ID PARENTESISA list_expression PARENTESISC 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= NUM 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= PARENTESISA expression PARENTESISC 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= NOT factor 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // signo ::= OPEA_SUM 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("signo",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // list_expression ::= expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("list_expression",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // list_expression ::= list_expression COMMA expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("list_expression",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSIntactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSIntactico$do_action(
    int                        CUP$AnalizadorSIntactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSIntactico$parser,
    java.util.Stack            CUP$AnalizadorSIntactico$stack,
    int                        CUP$AnalizadorSIntactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSIntactico$do_action_part00000000(
                               CUP$AnalizadorSIntactico$act_num,
                               CUP$AnalizadorSIntactico$parser,
                               CUP$AnalizadorSIntactico$stack,
                               CUP$AnalizadorSIntactico$top);
    }
}

}
